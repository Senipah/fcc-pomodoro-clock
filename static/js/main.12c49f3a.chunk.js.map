{"version":3,"sources":["assets/audio/alertklaxon_clean.mp3","Components/Clock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useReducer","React","createContext","useContext","useEffect","useRef","initialState","breakLength","sessionLength","timerMinutes","timerSeconds","running","isSession","ClockContext","Clock","clockReducer","state","dispatch","id","Provider","value","ControlGroup","Timer","action","decrement","val","handleType","type","newVal","increment","name","newSessionLength","newBreakLength","alert","current","pause","currentTime","play","tick","Control","props","titleCase","charAt","toUpperCase","slice","toLowerCase","className","onClick","map","e","i","key","interval","setInterval","clearInterval","formatTime","src","alarm","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.12c49f3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alertklaxon_clean.50f65ebf.mp3\";","import React from 'react';\r\nimport './Clock.css';\r\nimport alarm from '../assets/audio/alertklaxon_clean.mp3';\r\nconst { useReducer, createContext, useContext, useEffect, useRef } = React;\r\n\r\nconst initialState = {\r\n  breakLength: 5,\r\n  sessionLength: 25,\r\n  timerMinutes: 25,\r\n  timerSeconds: 0,\r\n  running: false,\r\n  isSession: true\r\n};\r\n\r\nconst ClockContext = createContext();\r\n\r\nexport default function Clock() {\r\n  const [state, dispatch] = useReducer(clockReducer, initialState);\r\n  return (\r\n    <div id='clock'>\r\n      <ClockContext.Provider value={{ state, dispatch }}>\r\n        <ControlGroup />\r\n        <Timer />\r\n      </ClockContext.Provider>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction clockReducer(state, action) {\r\n  const increment = val => {\r\n    return (val += 1);\r\n  };\r\n  const decrement = val => {\r\n    return (val -= 1);\r\n  };\r\n\r\n  const handleType = (val, type) => {\r\n    if (type === 'increment') {\r\n      const newVal = increment(val);\r\n      return newVal > 60 ? val : newVal;\r\n    } else if (type === 'decrement') {\r\n      const newVal = decrement(val);\r\n      return newVal < 1 ? val : newVal;\r\n    }\r\n    return val;\r\n  };\r\n\r\n  const tick = state => {\r\n    const SECONDS_BOUND = 59;\r\n    let { timerMinutes, timerSeconds } = state;\r\n    timerSeconds = decrement(timerSeconds);\r\n    if (timerSeconds < 0) {\r\n      timerMinutes = decrement(timerMinutes);\r\n      if (timerMinutes < 0) {\r\n        //  interval change\r\n        if (state.isSession) {\r\n          timerMinutes = state.breakLength;\r\n        } else {\r\n          timerMinutes = state.sessionLength;\r\n        }\r\n        timerSeconds = initialState.timerSeconds;\r\n        state.alert.current.play();\r\n        return {\r\n          ...state,\r\n          timerMinutes: timerMinutes,\r\n          timerSeconds: timerSeconds,\r\n          isSession: !state.isSession\r\n        };\r\n      }\r\n      return {\r\n        ...state,\r\n        timerMinutes: timerMinutes,\r\n        timerSeconds: SECONDS_BOUND\r\n      };\r\n    }\r\n    return {\r\n      ...state,\r\n      timerSeconds\r\n    };\r\n  };\r\n\r\n  let newState = {};\r\n  switch (action.name) {\r\n    case 'session':\r\n      const newSessionLength = handleType(state.sessionLength, action.type);\r\n      if (state.running) {\r\n        newState = {\r\n          ...state,\r\n          sessionLength: newSessionLength\r\n        };\r\n      } else {\r\n        newState = {\r\n          ...state,\r\n          timerMinutes: newSessionLength,\r\n          sessionLength: newSessionLength\r\n        };\r\n      }\r\n      return newState;\r\n    case 'break':\r\n      const newBreakLength = handleType(state.breakLength, action.type);\r\n      newState = {\r\n        ...state,\r\n        breakLength: newBreakLength\r\n      };\r\n      return newState;\r\n    case 'start_stop':\r\n      return { ...state, running: !state.running };\r\n    case 'reset':\r\n      state.alert.current.pause();\r\n      state.alert.current.currentTime = 0;\r\n      return initialState;\r\n    case 'tick':\r\n      return tick(state);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction Control(props) {\r\n  const { state, dispatch } = useContext(ClockContext);\r\n  const titleCase =\r\n    props.name.charAt(0).toUpperCase() + props.name.slice(1).toLowerCase();\r\n  return (\r\n    <div id={props.name} className='control'>\r\n      <div id={`${props.name}-label`} className='control-label'>\r\n        <h2>{titleCase} Length</h2>\r\n        <div id={`${props.name}-length`} className='control-value'>\r\n          {state[`${props.name}Length`]}\r\n        </div>\r\n      </div>\r\n      <div id={`${props.name}-buttons`} className='control-buttons'>\r\n        <button\r\n          id={`${props.name}-decrement`}\r\n          onClick={() => dispatch({ name: props.name, type: 'decrement' })}\r\n        >\r\n          Decrement\r\n        </button>\r\n        <button\r\n          id={`${props.name}-increment`}\r\n          onClick={() => dispatch({ name: props.name, type: 'increment' })}\r\n        >\r\n          Increment\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction ControlGroup() {\r\n  const controls = ['break', 'session'];\r\n  return (\r\n    <div id='controls'>\r\n      {controls.map((e, i) => (\r\n        <Control name={e} key={i} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Timer() {\r\n  const { state, dispatch } = useContext(ClockContext);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      if (state.running) {\r\n        dispatch({ name: 'tick' });\r\n      }\r\n    }, 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [dispatch, state.running]);\r\n\r\n  const formatTime = val => {\r\n    if (val < 0) {\r\n      return '00';\r\n    }\r\n    if (val < 10) {\r\n      return '0' + val;\r\n    }\r\n    return val;\r\n  };\r\n\r\n  const alert = useRef(null);\r\n  state['alert'] = alert;\r\n  // const alarm =\r\n  //   'https://www.trekcore.com/audio/redalertandklaxons/alertklaxon_clean.mp3';\r\n\r\n  return (\r\n    <div id='timer'>\r\n      <audio src={alarm} ref={alert} className='clip' id='beep' />\r\n      <h2 id='timer-label'>{state.isSession ? 'Session' : 'Break'}</h2>\r\n      <div id='time-left'>\r\n        <span>{formatTime(state.timerMinutes)}</span>\r\n        <span>:</span>\r\n        <span>{formatTime(state.timerSeconds)}</span>\r\n      </div>\r\n      <div id='timer-controls'>\r\n        <button\r\n          id='start_stop'\r\n          onClick={() => dispatch({ name: 'start_stop' })}\r\n        >\r\n          Start/Stop\r\n        </button>\r\n        <button id='reset' onClick={() => dispatch({ name: 'reset' })}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Clock from './Components/Clock';\n\n// const projectName = 'pomodoro-clock';\n// localStorage.setItem('example_project', 'Pomodoro Clock');\n\nfunction App() {\n  return (\n    <div className='app'>\n      <Clock />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}